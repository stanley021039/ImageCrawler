let socket
let sessionToken = generateSessionToken();
console.log('current sessionToken:', sessionToken)

var resetButton = document.getElementById('resetButton');
resetButton.addEventListener('click', function() {
    if (socket) {
        socket.close();
    }

    fetch(`${applicationRoot}/api/Sessions?sessionToken=${sessionToken}`, {
        method: 'DELETE',
      })
      .then(response => {
        if (response.ok) {
          console.log('Session deleted successfully');
        } else {
          console.error('Failed to delete session');
        }
      })
      .catch(error => {
        console.error('Error occurred while deleting session:', error);
      });

    sessionToken = generateSessionToken();
    const imageContainer = document.getElementById('imageContainer');
    imageContainer.innerHTML = '';
    console.log('reset sessionToken, current sessionToken:', sessionToken)
});

function startFetching() {
    if (socket) {
        socket.close();
    }

    const query = document.getElementById('queryInput').value.trim();
    if (query === '') {
        if (socket) {
            socket.close();
        }
        return;
    }

    let amount = document.getElementById('amountInput').value.trim();
    amount = amount === '' ? 20 : parseInt(amount);

    var siteselectElement = document.getElementById("sourceSelect");
    var siteValue = siteselectElement.options[siteselectElement.selectedIndex].value;
    
    socket = io('https://www.hd0619-info.site:8001');

    socket.on('image', function(img_name) {
        loadImageFromBackend(img_name, sessionToken);
    });

    socket.on('close', function() {
        console.log('WebSocket connection closed');
    });

    socket.on('error', function(error) {
        console.error('WebSocket error:', error);
    });
}

function loadImageFromBackend(img_name, sessionToken) {
    // Send GET request to backend to get image
    fetch(`${applicationRoot}/api/Images?sessionToken=${sessionToken}&img_name=${encodeURIComponent(img_name)}`)
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.blob();
    })
    .then(blob => {
        const objectURL = URL.createObjectURL(blob);

        const link = document.createElement("a");
        link.href = objectURL;
        link.target = "_blank";

        const img = new Image();
        img.onload = function() {
            img.style.maxWidth = "200px";
            img.style.height = "auto";
        };
        img.onerror = function() {
            console.error('Error loading image');
        };
        img.src = objectURL;

        img.addEventListener('click', function() {
            deleteImage(img_name, sessionToken);
        });

        link.appendChild(img);

        const imageContainer = document.getElementById('imageContainer');
        imageContainer.appendChild(link);
    })
    .catch(error => {
        console.error('Error fetching image:', error);
    });
}

function generateSessionToken() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

var downloadButton = document.getElementById('downloadButton');
downloadButton.addEventListener('click', function() {
    fetch(`${applicationRoot}/api/Sessions?sessionToken=${sessionToken}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.blob();
    })
    .then(blob => {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'images.zip';
        a.style.display = 'none';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    })
    .catch(error => {
        console.error('Error downloading images:', error);
    });
});

function deleteImage(img_name, sessionToken) {
    fetch(`${applicationRoot}/api/Images?sessionToken=${sessionToken}&img_name=${encodeURIComponent(img_name)}`, {
        method: 'DELETE',
    })
    .then(response => {
        if (response.ok) {
            console.log('Image deleted successfully');
            const imgElement = document.querySelector(`img[src*="${encodeURIComponent(img_name)}"]`);
            if (imgElement) {
                imgElement.parentNode.removeChild(imgElement);
            }
        } else {
            console.error('Failed to delete image');
        }
    })
    .catch(error => {
        console.error('Error occurred while deleting image:', error);
    });
}